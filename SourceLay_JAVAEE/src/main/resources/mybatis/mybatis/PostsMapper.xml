<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.PostsMapper">
  <resultMap id="BaseResultMap" type="com.example.model.Posts">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="thread_id" jdbcType="BIGINT" property="threadId" />
    <result column="reply_post_id" jdbcType="BIGINT" property="replyPostId" />
    <result column="reply_user_id" jdbcType="BIGINT" property="replyUserId" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="port" jdbcType="INTEGER" property="port" />
    <result column="reply_count" jdbcType="INTEGER" property="replyCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
    <result column="deleted_user_id" jdbcType="BIGINT" property="deletedUserId" />
    <result column="is_first" jdbcType="TINYINT" property="isFirst" />
    <result column="is_comment" jdbcType="TINYINT" property="isComment" />
    <result column="is_approved" jdbcType="TINYINT" property="isApproved" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.model.Posts">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, thread_id, reply_post_id, reply_user_id, ip, port, reply_count, like_count, 
    created_at, updated_at, deleted_at, deleted_user_id, is_first, is_comment, is_approved
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.model.PostsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.model.PostsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from posts
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.model.PostsExample">
    delete from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.model.Posts">
    insert into posts (id, user_id, thread_id, 
      reply_post_id, reply_user_id, ip, 
      port, reply_count, like_count, 
      created_at, updated_at, deleted_at, 
      deleted_user_id, is_first, is_comment, 
      is_approved, content)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{threadId,jdbcType=BIGINT}, 
      #{replyPostId,jdbcType=BIGINT}, #{replyUserId,jdbcType=BIGINT}, #{ip,jdbcType=VARCHAR}, 
      #{port,jdbcType=INTEGER}, #{replyCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP}, 
      #{deletedUserId,jdbcType=BIGINT}, #{isFirst,jdbcType=TINYINT}, #{isComment,jdbcType=TINYINT}, 
      #{isApproved,jdbcType=TINYINT}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.Posts">
    insert into posts
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="threadId != null">
        thread_id,
      </if>
      <if test="replyPostId != null">
        reply_post_id,
      </if>
      <if test="replyUserId != null">
        reply_user_id,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="port != null">
        port,
      </if>
      <if test="replyCount != null">
        reply_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
      <if test="deletedUserId != null">
        deleted_user_id,
      </if>
      <if test="isFirst != null">
        is_first,
      </if>
      <if test="isComment != null">
        is_comment,
      </if>
      <if test="isApproved != null">
        is_approved,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="threadId != null">
        #{threadId,jdbcType=BIGINT},
      </if>
      <if test="replyPostId != null">
        #{replyPostId,jdbcType=BIGINT},
      </if>
      <if test="replyUserId != null">
        #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        #{port,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedUserId != null">
        #{deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="isFirst != null">
        #{isFirst,jdbcType=TINYINT},
      </if>
      <if test="isComment != null">
        #{isComment,jdbcType=TINYINT},
      </if>
      <if test="isApproved != null">
        #{isApproved,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.model.PostsExample" resultType="java.lang.Long">
    select count(*) from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update posts
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.threadId != null">
        thread_id = #{record.threadId,jdbcType=BIGINT},
      </if>
      <if test="record.replyPostId != null">
        reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      </if>
      <if test="record.replyUserId != null">
        reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      </if>
      <if test="record.ip != null">
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.port != null">
        port = #{record.port,jdbcType=INTEGER},
      </if>
      <if test="record.replyCount != null">
        reply_count = #{record.replyCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedAt != null">
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedUserId != null">
        deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="record.isFirst != null">
        is_first = #{record.isFirst,jdbcType=TINYINT},
      </if>
      <if test="record.isComment != null">
        is_comment = #{record.isComment,jdbcType=TINYINT},
      </if>
      <if test="record.isApproved != null">
        is_approved = #{record.isApproved,jdbcType=TINYINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update posts
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      thread_id = #{record.threadId,jdbcType=BIGINT},
      reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      ip = #{record.ip,jdbcType=VARCHAR},
      port = #{record.port,jdbcType=INTEGER},
      reply_count = #{record.replyCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      is_first = #{record.isFirst,jdbcType=TINYINT},
      is_comment = #{record.isComment,jdbcType=TINYINT},
      is_approved = #{record.isApproved,jdbcType=TINYINT},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update posts
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      thread_id = #{record.threadId,jdbcType=BIGINT},
      reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      ip = #{record.ip,jdbcType=VARCHAR},
      port = #{record.port,jdbcType=INTEGER},
      reply_count = #{record.replyCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      is_first = #{record.isFirst,jdbcType=TINYINT},
      is_comment = #{record.isComment,jdbcType=TINYINT},
      is_approved = #{record.isApproved,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.Posts">
    update posts
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="threadId != null">
        thread_id = #{threadId,jdbcType=BIGINT},
      </if>
      <if test="replyPostId != null">
        reply_post_id = #{replyPostId,jdbcType=BIGINT},
      </if>
      <if test="replyUserId != null">
        reply_user_id = #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        port = #{port,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        reply_count = #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedUserId != null">
        deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="isFirst != null">
        is_first = #{isFirst,jdbcType=TINYINT},
      </if>
      <if test="isComment != null">
        is_comment = #{isComment,jdbcType=TINYINT},
      </if>
      <if test="isApproved != null">
        is_approved = #{isApproved,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.model.Posts">
    update posts
    set user_id = #{userId,jdbcType=BIGINT},
      thread_id = #{threadId,jdbcType=BIGINT},
      reply_post_id = #{replyPostId,jdbcType=BIGINT},
      reply_user_id = #{replyUserId,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      reply_count = #{replyCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      is_first = #{isFirst,jdbcType=TINYINT},
      is_comment = #{isComment,jdbcType=TINYINT},
      is_approved = #{isApproved,jdbcType=TINYINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.Posts">
    update posts
    set user_id = #{userId,jdbcType=BIGINT},
      thread_id = #{threadId,jdbcType=BIGINT},
      reply_post_id = #{replyPostId,jdbcType=BIGINT},
      reply_user_id = #{replyUserId,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      reply_count = #{replyCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      is_first = #{isFirst,jdbcType=TINYINT},
      is_comment = #{isComment,jdbcType=TINYINT},
      is_approved = #{isApproved,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.example.model.Posts">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="thread_id" jdbcType="BIGINT" property="threadId" />
    <result column="reply_post_id" jdbcType="BIGINT" property="replyPostId" />
    <result column="reply_user_id" jdbcType="BIGINT" property="replyUserId" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="port" jdbcType="INTEGER" property="port" />
    <result column="reply_count" jdbcType="INTEGER" property="replyCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
    <result column="deleted_user_id" jdbcType="BIGINT" property="deletedUserId" />
    <result column="is_first" jdbcType="TINYINT" property="isFirst" />
    <result column="is_comment" jdbcType="TINYINT" property="isComment" />
    <result column="is_approved" jdbcType="TINYINT" property="isApproved" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.model.Posts">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, thread_id, reply_post_id, reply_user_id, ip, port, reply_count, like_count, 
    created_at, updated_at, deleted_at, deleted_user_id, is_first, is_comment, is_approved
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.model.PostsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.model.PostsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from posts
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.model.PostsExample">
    delete from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.model.Posts">
    insert into posts (id, user_id, thread_id, 
      reply_post_id, reply_user_id, ip, 
      port, reply_count, like_count, 
      created_at, updated_at, deleted_at, 
      deleted_user_id, is_first, is_comment, 
      is_approved, content)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{threadId,jdbcType=BIGINT}, 
      #{replyPostId,jdbcType=BIGINT}, #{replyUserId,jdbcType=BIGINT}, #{ip,jdbcType=VARCHAR}, 
      #{port,jdbcType=INTEGER}, #{replyCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP}, 
      #{deletedUserId,jdbcType=BIGINT}, #{isFirst,jdbcType=TINYINT}, #{isComment,jdbcType=TINYINT}, 
      #{isApproved,jdbcType=TINYINT}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.Posts">
    insert into posts
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="threadId != null">
        thread_id,
      </if>
      <if test="replyPostId != null">
        reply_post_id,
      </if>
      <if test="replyUserId != null">
        reply_user_id,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="port != null">
        port,
      </if>
      <if test="replyCount != null">
        reply_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
      <if test="deletedUserId != null">
        deleted_user_id,
      </if>
      <if test="isFirst != null">
        is_first,
      </if>
      <if test="isComment != null">
        is_comment,
      </if>
      <if test="isApproved != null">
        is_approved,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="threadId != null">
        #{threadId,jdbcType=BIGINT},
      </if>
      <if test="replyPostId != null">
        #{replyPostId,jdbcType=BIGINT},
      </if>
      <if test="replyUserId != null">
        #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        #{port,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedUserId != null">
        #{deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="isFirst != null">
        #{isFirst,jdbcType=TINYINT},
      </if>
      <if test="isComment != null">
        #{isComment,jdbcType=TINYINT},
      </if>
      <if test="isApproved != null">
        #{isApproved,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.model.PostsExample" resultType="java.lang.Long">
    select count(*) from posts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update posts
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.threadId != null">
        thread_id = #{record.threadId,jdbcType=BIGINT},
      </if>
      <if test="record.replyPostId != null">
        reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      </if>
      <if test="record.replyUserId != null">
        reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      </if>
      <if test="record.ip != null">
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.port != null">
        port = #{record.port,jdbcType=INTEGER},
      </if>
      <if test="record.replyCount != null">
        reply_count = #{record.replyCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedAt != null">
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedUserId != null">
        deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="record.isFirst != null">
        is_first = #{record.isFirst,jdbcType=TINYINT},
      </if>
      <if test="record.isComment != null">
        is_comment = #{record.isComment,jdbcType=TINYINT},
      </if>
      <if test="record.isApproved != null">
        is_approved = #{record.isApproved,jdbcType=TINYINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update posts
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      thread_id = #{record.threadId,jdbcType=BIGINT},
      reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      ip = #{record.ip,jdbcType=VARCHAR},
      port = #{record.port,jdbcType=INTEGER},
      reply_count = #{record.replyCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      is_first = #{record.isFirst,jdbcType=TINYINT},
      is_comment = #{record.isComment,jdbcType=TINYINT},
      is_approved = #{record.isApproved,jdbcType=TINYINT},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update posts
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      thread_id = #{record.threadId,jdbcType=BIGINT},
      reply_post_id = #{record.replyPostId,jdbcType=BIGINT},
      reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      ip = #{record.ip,jdbcType=VARCHAR},
      port = #{record.port,jdbcType=INTEGER},
      reply_count = #{record.replyCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{record.deletedUserId,jdbcType=BIGINT},
      is_first = #{record.isFirst,jdbcType=TINYINT},
      is_comment = #{record.isComment,jdbcType=TINYINT},
      is_approved = #{record.isApproved,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.Posts">
    update posts
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="threadId != null">
        thread_id = #{threadId,jdbcType=BIGINT},
      </if>
      <if test="replyPostId != null">
        reply_post_id = #{replyPostId,jdbcType=BIGINT},
      </if>
      <if test="replyUserId != null">
        reply_user_id = #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        port = #{port,jdbcType=INTEGER},
      </if>
      <if test="replyCount != null">
        reply_count = #{replyCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedUserId != null">
        deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      </if>
      <if test="isFirst != null">
        is_first = #{isFirst,jdbcType=TINYINT},
      </if>
      <if test="isComment != null">
        is_comment = #{isComment,jdbcType=TINYINT},
      </if>
      <if test="isApproved != null">
        is_approved = #{isApproved,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.model.Posts">
    update posts
    set user_id = #{userId,jdbcType=BIGINT},
      thread_id = #{threadId,jdbcType=BIGINT},
      reply_post_id = #{replyPostId,jdbcType=BIGINT},
      reply_user_id = #{replyUserId,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      reply_count = #{replyCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      is_first = #{isFirst,jdbcType=TINYINT},
      is_comment = #{isComment,jdbcType=TINYINT},
      is_approved = #{isApproved,jdbcType=TINYINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.Posts">
    update posts
    set user_id = #{userId,jdbcType=BIGINT},
      thread_id = #{threadId,jdbcType=BIGINT},
      reply_post_id = #{replyPostId,jdbcType=BIGINT},
      reply_user_id = #{replyUserId,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      reply_count = #{replyCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      deleted_user_id = #{deletedUserId,jdbcType=BIGINT},
      is_first = #{isFirst,jdbcType=TINYINT},
      is_comment = #{isComment,jdbcType=TINYINT},
      is_approved = #{isApproved,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>